/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h>
#include "mrf24j40/mrf24j40.h"
#include "mrf24j40/mrf24j40_reg.h"
#include "libcontrol/control.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
static pictrl_t syncController;
static int do_tx = 0; //indicate to do TX at next TX_POS
static mrf24j40_devHandle_t myMrf24j40;
static macHeader_t myMACHeader = {
		.destAddress = 0xFFFF,
		.destPanId   = 0x1122,
		.srcPanId    = 0x1122,
		.srcAddress  = 0x0000, //will be set in main, acc. to slave_data
		.flags.ackReq = 0,
		.flags.destMode = 2,
		.flags.srcMode = 2,
		.flags.panIdCmpr = 1,
};

//Motor 0
//Power stage 0
//static calib_data_t calib_data = {
//		.eps_trsfmoffs = 11000,  //(approx. 60 degree)
//		.ia = {.offs = -8, .gain = -1944},
//		.ib = {.offs = +8, .gain = -1867},
//		.ic = {.offs = -1, .gain = -1959},
//		.i_autoOffs = false,
//		.vbus = {.offs = 47, .gain = 551}
//};

//Motor 1
//Power stage 1
//todo: Check data!
static calib_data_t calib_data = {
		.eps_trsfmoffs = 1000,
		.ia = {.offs = 0, .gain = -1900},
		.ib = {.offs = 0, .gain = -1900},
		.ic = {.offs = 0, .gain = -1900},
		.i_autoOffs = true,
		.vbus = {.offs = 47, .gain = 551}
};


//static calib_data_t calib_data = {
//		.eps_trsfmoffs = 11000,  //(approx. 60 degree)
//		.ia = {.offs = 0, .gain = 256},  //1.0, for calibration
//		.ib = {.offs = 0, .gain = 256},  //1.0, for calibration
//		.ic = {.offs = 0, .gain = 256},  //1.0, for calibration
//};

//Prototype 0 / Slave 0
//static slave_data_t slave_data = {
//		.slaveNum = 0,
//		.slaveCnt = 2,
//		.slaveAdr = 0x5679,
//		.masterAdr = 0x5678,
//		.havePA = 0
//};

//Prototype 1 / Slave 1
static slave_data_t slave_data = {
		.slaveNum = 1,
		.slaveCnt = 2,
		.slaveAdr = 0x567A,
		.masterAdr = 0x5678,
		.havePA = 1
};



/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_OPAMP3_Init(void);
static void MX_OPAMP1_Init(void);
static void MX_OPAMP2_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM4_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM2_Init(void);
static void MX_ADC1_Init(void);
static void MX_ADC2_Init(void);
static void MX_CORDIC_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_OPAMP3_Init();
  MX_OPAMP1_Init();
  MX_OPAMP2_Init();
  MX_TIM1_Init();
  MX_TIM4_Init();
  MX_SPI1_Init();
  MX_TIM2_Init();
  MX_ADC1_Init();
  MX_ADC2_Init();
  MX_CORDIC_Init();
  /* USER CODE BEGIN 2 */

  //Enable Opamps
  LL_OPAMP_Enable(OPAMP1);
  LL_OPAMP_Enable(OPAMP2);
  LL_OPAMP_Enable(OPAMP3);


  //Enable ADCs
  LL_ADC_Enable(ADC1);
  LL_ADC_Enable(ADC2);

  //LL_ADC_EnableIT_EOCS(ADC1);
  //LL_ADC_REG_StartConversionSWStart(ADC1);
  LL_ADC_INJ_StartConversion(ADC1);
  //LL_ADC_EnableIT_EOCS(ADC2);
  //LL_ADC_REG_StartConversionSWStart(ADC2);
  LL_ADC_INJ_StartConversion(ADC2);


  //TIM 4 is for Encoder
  LL_TIM_EnableCounter(TIM4);
  LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3); //Zero marker position


  //TIM1 is for PWM
  LL_TIM_EnableCounter(TIM1);
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1N);
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2);
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2N);
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3);
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3N);
  //LL_TIM_EnableAllOutputs(TIM1); //PWM on

  LL_TIM_EnableIT_UPDATE(TIM1);


  //TIM2 is for IEEE802.15.4 / MRF24J40
  uint16_t txpos = WFB_SLAVE_TX_POS_OFFS + WFB_SLAVE_TX_POS_SHIFT*slave_data.slaveNum;
  LL_TIM_OC_SetCompareCH2(TIM2, txpos); //Trigger for Data send
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
  LL_TIM_EnableCounter(TIM2);

  control_pictrl_init(&syncController, 0.1, 1000.0, 10.0);
  syncController.max = 500.0f;
  syncController.min = -500.0f;
  LL_TIM_EnableIT_UPDATE(TIM2);
  delay_ms(100);

  mrf24j40_initData_t initData;
  myMACHeader.srcAddress = slave_data.slaveAdr;
  initData.hasPA = slave_data.havePA;

  mrf24j40_hw_init(&myMrf24j40, &initData);
  mrf24j40_setRxModePromiscuous(&myMrf24j40);

  uint8_t readMode = MRF24J40_shortAddressRead(REG_RXMCR);
  if(readMode != 0x01){
	  for(;;);
  }

  LL_TIM_EnableIT_CC1(TIM2);  //Interrupt / Data RX
  LL_TIM_EnableIT_CC2(TIM2);  //Data TX


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
  {
  }
  LL_PWR_EnableRange1BoostMode();
  LL_RCC_HSE_Enable();
   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
  {
  }

  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_2, 80, LL_RCC_PLLR_DIV_2);
  LL_RCC_PLL_EnableDomain_SYS();
  LL_RCC_PLL_Enable();
   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
  {
  }

  /* Insure 1ï¿½s transition state at intermediate medium speed clock based on DWT */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  DWT->CYCCNT = 0;
  while(DWT->CYCCNT < 100);
  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_SetSystemCoreClock(160000000);

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
  {
    Error_Handler();
  }
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_SYSCLK);
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  PB12   ------> ADC1_IN11
  PB14   ------> ADC1_IN5
  */
  GPIO_InitStruct.Pin = VBUS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(VBUS_GPIO_Port, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = POTI_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(POTI_GPIO_Port, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = TEMP_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(TEMP_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
  LL_ADC_Init(ADC1, &ADC_InitStruct);
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
  LL_ADC_SetGainCompensation(ADC1, 0);
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_TRGO;
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS;
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_DISABLE;
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
  LL_ADC_INJ_SetQueueMode(ADC1, LL_ADC_INJ_QUEUE_DISABLE);
  LL_ADC_INJ_SetTriggerEdge(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
  /* Delay for ADC internal voltage regulator stabilization. */
  /* Compute number of CPU cycles to wait for, from delay in us. */
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
  while(wait_loop_index != 0)
  {
    wait_loop_index--;
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_5);
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_2CYCLES_5);
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SINGLE_ENDED);
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_11);
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_2CYCLES_5);
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SINGLE_ENDED);
  /** Configure Injected Channel
  */
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_VOPAMP1);
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VOPAMP1, LL_ADC_SAMPLINGTIME_2CYCLES_5);
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_VOPAMP1, LL_ADC_SINGLE_ENDED);
  LL_ADC_SetOffset(ADC1, LL_ADC_OFFSET_1, LL_ADC_CHANNEL_VOPAMP1, 2490);
  LL_ADC_SetOffsetSign(ADC1, LL_ADC_OFFSET_1, LL_ADC_OFFSET_SIGN_NEGATIVE);
  LL_ADC_SetOffsetSaturation(ADC1, LL_ADC_OFFSET_1, LL_ADC_OFFSET_SATURATION_DISABLE);
  /** Configure Injected Channel
  */
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_1);
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_2CYCLES_5);
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
  /* USER CODE BEGIN ADC1_Init 2 */


  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);

  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
  LL_ADC_Init(ADC2, &ADC_InitStruct);
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
  LL_ADC_SetGainCompensation(ADC2, 0);
  LL_ADC_SetOverSamplingScope(ADC2, LL_ADC_OVS_DISABLE);
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_TRGO;
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS;
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_DISABLE;
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
  LL_ADC_INJ_SetQueueMode(ADC2, LL_ADC_INJ_QUEUE_DISABLE);
  LL_ADC_INJ_SetTriggerEdge(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
  /* Delay for ADC internal voltage regulator stabilization. */
  /* Compute number of CPU cycles to wait for, from delay in us. */
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
  while(wait_loop_index != 0)
  {
    wait_loop_index--;
  }
  /** Configure Injected Channel
  */
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_VOPAMP2);
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_VOPAMP2, LL_ADC_SAMPLINGTIME_2CYCLES_5);
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_VOPAMP2, LL_ADC_SINGLE_ENDED);
  LL_ADC_SetOffset(ADC2, LL_ADC_OFFSET_1, LL_ADC_CHANNEL_VOPAMP2, 2490);
  LL_ADC_SetOffsetSign(ADC2, LL_ADC_OFFSET_1, LL_ADC_OFFSET_SIGN_NEGATIVE);
  LL_ADC_SetOffsetSaturation(ADC2, LL_ADC_OFFSET_1, LL_ADC_OFFSET_SATURATION_DISABLE);
  /** Configure Injected Channel
  */
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_VOPAMP3_ADC2);
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_VOPAMP3_ADC2, LL_ADC_SAMPLINGTIME_2CYCLES_5);
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_VOPAMP3_ADC2, LL_ADC_SINGLE_ENDED);
  LL_ADC_SetOffset(ADC2, LL_ADC_OFFSET_2, LL_ADC_CHANNEL_VOPAMP3_ADC2, 2490);
  LL_ADC_SetOffsetSign(ADC2, LL_ADC_OFFSET_2, LL_ADC_OFFSET_SIGN_NEGATIVE);
  LL_ADC_SetOffsetSaturation(ADC2, LL_ADC_OFFSET_2, LL_ADC_OFFSET_SATURATION_DISABLE);
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}

/**
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{

  /* USER CODE BEGIN CORDIC_Init 0 */

  /* USER CODE END CORDIC_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CORDIC);

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */

  /* nothing else to be configured */

  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}

/**
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{

  /* USER CODE BEGIN OPAMP1_Init 0 */

  /* USER CODE END OPAMP1_Init 0 */

  LL_OPAMP_InitTypeDef OPAMP_InitStruct = {0};

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
  /**OPAMP1 GPIO Configuration
  PA1   ------> OPAMP1_VINP
  PA3   ------> OPAMP1_VINM0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  OPAMP_InitStruct.PowerMode = LL_OPAMP_POWERMODE_NORMALSPEED;
  OPAMP_InitStruct.FunctionalMode = LL_OPAMP_MODE_PGA_IO0_BIAS;
  OPAMP_InitStruct.InputNonInverting = LL_OPAMP_INPUT_NONINVERT_IO0;
  LL_OPAMP_Init(OPAMP1, &OPAMP_InitStruct);
  LL_OPAMP_SetInputsMuxMode(OPAMP1, LL_OPAMP_INPUT_MUX_DISABLE);
  LL_OPAMP_SetInternalOutput(OPAMP1, LL_OPAMP_INTERNAL_OUPUT_ENABLED);
  LL_OPAMP_SetPGAGain(OPAMP1, LL_OPAMP_PGA_GAIN_16_OR_MINUS_15);
  LL_OPAMP_SetTrimmingMode(OPAMP1, LL_OPAMP_TRIMMING_FACTORY);
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}

/**
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{

  /* USER CODE BEGIN OPAMP2_Init 0 */

  /* USER CODE END OPAMP2_Init 0 */

  LL_OPAMP_InitTypeDef OPAMP_InitStruct = {0};

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
  /**OPAMP2 GPIO Configuration
  PA5   ------> OPAMP2_VINM0
  PA7   ------> OPAMP2_VINP
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  OPAMP_InitStruct.PowerMode = LL_OPAMP_POWERMODE_NORMALSPEED;
  OPAMP_InitStruct.FunctionalMode = LL_OPAMP_MODE_PGA_IO0_BIAS;
  OPAMP_InitStruct.InputNonInverting = LL_OPAMP_INPUT_NONINVERT_IO0;
  LL_OPAMP_Init(OPAMP2, &OPAMP_InitStruct);
  LL_OPAMP_SetInputsMuxMode(OPAMP2, LL_OPAMP_INPUT_MUX_DISABLE);
  LL_OPAMP_SetInternalOutput(OPAMP2, LL_OPAMP_INTERNAL_OUPUT_ENABLED);
  LL_OPAMP_SetPGAGain(OPAMP2, LL_OPAMP_PGA_GAIN_16_OR_MINUS_15);
  LL_OPAMP_SetTrimmingMode(OPAMP2, LL_OPAMP_TRIMMING_FACTORY);
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}

/**
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{

  /* USER CODE BEGIN OPAMP3_Init 0 */

  /* USER CODE END OPAMP3_Init 0 */

  LL_OPAMP_InitTypeDef OPAMP_InitStruct = {0};

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
  /**OPAMP3 GPIO Configuration
  PB0   ------> OPAMP3_VINP
  PB2   ------> OPAMP3_VINM0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  OPAMP_InitStruct.PowerMode = LL_OPAMP_POWERMODE_NORMALSPEED;
  OPAMP_InitStruct.FunctionalMode = LL_OPAMP_MODE_PGA_IO0_BIAS;
  OPAMP_InitStruct.InputNonInverting = LL_OPAMP_INPUT_NONINVERT_IO0;
  LL_OPAMP_Init(OPAMP3, &OPAMP_InitStruct);
  LL_OPAMP_SetInputsMuxMode(OPAMP3, LL_OPAMP_INPUT_MUX_DISABLE);
  LL_OPAMP_SetInternalOutput(OPAMP3, LL_OPAMP_INTERNAL_OUPUT_ENABLED);
  LL_OPAMP_SetPGAGain(OPAMP3, LL_OPAMP_PGA_GAIN_16_OR_MINUS_15);
  LL_OPAMP_SetTrimmingMode(OPAMP3, LL_OPAMP_TRIMMING_FACTORY);
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
  TIM_InitStruct.Autoreload = 4999;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  TIM_InitStruct.RepetitionCounter = 0;
  LL_TIM_Init(TIM1, &TIM_InitStruct);
  LL_TIM_EnableARRPreload(TIM1);
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.CompareValue = 10000;
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_UPDATE);
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
  LL_TIM_DisableMasterSlaveMode(TIM1);
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
  TIM_BDTRInitStruct.DeadTime = 100;
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
  /**TIM1 GPIO Configuration
  PC13   ------> TIM1_CH1N
  PB15   ------> TIM1_CH3N
  PA8   ------> TIM1_CH1
  PA9   ------> TIM1_CH2
  PA10   ------> TIM1_CH3
  PA12   ------> TIM1_CH2N
  */
  GPIO_InitStruct.Pin = PWM_1N_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
  LL_GPIO_Init(PWM_1N_GPIO_Port, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = PWM_3N_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
  LL_GPIO_Init(PWM_3N_GPIO_Port, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = PWM_1_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
  LL_GPIO_Init(PWM_1_GPIO_Port, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = PWM_2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
  LL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = PWM_3_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
  LL_GPIO_Init(PWM_3_GPIO_Port, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = PWM_2N_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
  LL_GPIO_Init(PWM_2N_GPIO_Port, &GPIO_InitStruct);

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  */
  GPIO_InitStruct.Pin = MRF24J40_INT_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
  LL_GPIO_Init(MRF24J40_INT_GPIO_Port, &GPIO_InitStruct);

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
  NVIC_EnableIRQ(TIM2_IRQn);

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 31;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 49999;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  LL_TIM_Init(TIM2, &TIM_InitStruct);
  LL_TIM_EnableARRPreload(TIM2);
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.CompareValue = 0;
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
  LL_TIM_DisableMasterSlaveMode(TIM2);
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV2_N6);
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_FALLING);
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  PB8-BOOT0   ------> TIM4_CH3
  */
  GPIO_InitStruct.Pin = ENC_A_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
  LL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = ENC_B_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
  LL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = ENC_Z_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
  LL_GPIO_Init(ENC_Z_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 0;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 4095;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  LL_TIM_Init(TIM4, &TIM_InitStruct);
  LL_TIM_DisableARRPreload(TIM4);
  LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X4_TI12);
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV2_N6);
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV2_N6);
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
  LL_TIM_DisableMasterSlaveMode(TIM4);
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_ACTIVEINPUT_DIRECTTI);
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_ICPSC_DIV1);
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_IC_FILTER_FDIV2_N6);
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_IC_POLARITY_RISING);
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);

  /**/
  LL_GPIO_SetOutputPin(MRF24J40_CS_GPIO_Port, MRF24J40_CS_Pin);

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);

  /**/
  GPIO_InitStruct.Pin = MRF24J40_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(MRF24J40_CS_GPIO_Port, &GPIO_InitStruct);

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /**/
  GPIO_InitStruct.Pin = BUTTON_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
#define PWM_MAX 5000

static void pwm_setrefint_3ph_tim1(int16_t ref[3]){
	int i;
	int32_t refi[3];
	uint32_t refu[3];

	for(i=0;i<3;i++){
		refi[i] = ( (int32_t)ref[i]);
		refi[i] += 32768;
		refu[i] = refi[i];
		refu[i] = refu[i] * PWM_MAX;
		refu[i] = refu[i] >> 16;
	}

	TIM1->CCR1 = refu[0];
	TIM1->CCR2 = refu[1];
	TIM1->CCR3 = refu[2];
}


typedef enum {
	interp_mode_none = 0,
	interp_mode_pos = 1,
	interp_mode_spd = 2
} interp_mode_t;

typedef struct
{
	uint64_t pos;       //  Current position Q16.48
	uint32_t in_pos;    //  Current position input Q16.16
	uint32_t in_pos_z0; //
	uint32_t in_pos_z1; //
	uint32_t in_pos_z2; //
	uint32_t in_pos_z3; //
	int32_t  p0;  //Interpolator coefficients const.
	int32_t  p1;  //Interpolator coefficients lin.
	int32_t  p2;  //Interpolator coefficients quadr.
	int32_t  p3;  //Interpolator coefficients cubic
	int16_t spd;        //  Speed  Q7.8
	int16_t spd_max;    //  Max Speed (usually positive value) Q7.8
	int16_t spd_min;    //  Min Speed (usually negative value) Q7.8
	uint16_t fs;        //  Sampling frequency
	uint16_t cyclecnt;     //cycle counter, since last reception
	uint16_t cyclecntmax;  //cycle counter current maximum 16kHz / 100Hz = 160, may be adapted due to sync to master
	interp_mode_t mode;
} interp_32_t;

typedef struct {
	uint32_t pos;       //  Latest position Q16.16
	uint8_t avail : 1;     //Position was received
	uint8_t avail_z1 : 1;  //Last positon was received
	uint32_t cyclerx;     //value of cycle counter at current reception
} pos_data_t;


#define INTP_COEFF_P0_Z0            0
#define INTP_COEFF_P0_Z1    357913941   //not needed, due to relativ calculation to pos. in_pos_z1
#define INTP_COEFF_P0_Z2   1431655765
#define INTP_COEFF_P0_Z3    357913941

#define INTP_COEFF_P1_Z0            0
#define INTP_COEFF_P1_Z1   1073741824  //not needed, due to relativ calculation to pos. in_pos_z1
#define INTP_COEFF_P1_Z2            0
#define INTP_COEFF_P1_Z3  -1073741824

#define INTP_COEFF_P2_Z0            0
#define INTP_COEFF_P2_Z1   1073741824 //not needed, due to relativ calculation to pos. in_pos_z1
#define INTP_COEFF_P2_Z2  -2147483648
#define INTP_COEFF_P2_Z3   1073741824

#define INTP_COEFF_P3_Z0    357913941
#define INTP_COEFF_P3_Z1  -1073741824 //not needed, due to relativ calculation to pos. in_pos_z1
#define INTP_COEFF_P3_Z2   1073741824
#define INTP_COEFF_P3_Z3   -357913941


void interp_32(interp_32_t* interpolator){
	uint32_t t_norm0 = 32768;
	uint32_t t_norm1 = 0;
	uint32_t t_norm2 = 0;
	uint32_t t_norm3 = 0;

	if(interpolator->cyclecnt == 0){
		//new data is available; get it...
		//todo: only if in pos mode
		interpolator->in_pos_z3 = interpolator->in_pos_z2;
		interpolator->in_pos_z2 = interpolator->in_pos_z1;
		interpolator->in_pos_z1 = interpolator->in_pos_z0;
		interpolator->in_pos_z0 = interpolator->in_pos;

		int32_t delta_pos_z0 = interpolator->in_pos_z0-interpolator->in_pos_z1;
		int32_t delta_pos_z2 = interpolator->in_pos_z2-interpolator->in_pos_z1;
		int32_t delta_pos_z3 = interpolator->in_pos_z3-interpolator->in_pos_z1;

		//...and calc coeffs
		interpolator->p0 = (                                           ((int64_t)delta_pos_z2)*INTP_COEFF_P0_Z2 + ((int64_t)delta_pos_z3)*INTP_COEFF_P0_Z3) >> 32;
		interpolator->p1 = (                                           ((int64_t)delta_pos_z2)*INTP_COEFF_P1_Z2 + ((int64_t)delta_pos_z3)*INTP_COEFF_P1_Z3) >> 32;
		interpolator->p2 = (                                           ((int64_t)delta_pos_z2)*INTP_COEFF_P2_Z2 + ((int64_t)delta_pos_z3)*INTP_COEFF_P2_Z3) >> 32;
		interpolator->p3 = (((int64_t)delta_pos_z0)*INTP_COEFF_P3_Z0 + ((int64_t)delta_pos_z2)*INTP_COEFF_P3_Z2 + ((int64_t)delta_pos_z3)*INTP_COEFF_P3_Z3) >> 32;
		//0 * p0 + 1*p1 + 2*p2 + 3*p3 =  1*p1 + 2*p2 + (2+1)*p3;
		int32_t ds = interpolator->p1 + (interpolator->p2<<1) + (interpolator->p3) + (interpolator->p3<<1);
		interpolator->spd = ds>>1; //todo: ??? Speed calculation is not clear
	}
	else {
		t_norm1 = ( ((uint32_t)interpolator->cyclecnt) * 32768) /  interpolator->cyclecntmax;
		t_norm2 = (t_norm1*t_norm1) / 32768;
		t_norm3 = (t_norm1*t_norm2) / 32768;
	}

	if(interpolator->mode == interp_mode_spd){
		int64_t delta_pos_intp = 0;
		delta_pos_intp = ((   ((int64_t)interpolator->spd)*256*65536) / interpolator->fs)*65536;
		interpolator->pos += delta_pos_intp;
	} else if(interpolator->mode == interp_mode_pos){
		interpolator->pos = ((uint64_t)interpolator->in_pos_z1)<<32;
		int64_t dp = ((int64_t)t_norm0 * (int64_t)interpolator->p0);
		dp = dp<<18;
		interpolator->pos += dp;
		dp = ((int64_t)t_norm1 * (int64_t)interpolator->p1);
		dp = dp<<18;
		interpolator->pos += dp;
		dp = ((int64_t)t_norm2 * (int64_t)interpolator->p2);
		dp = dp<<18;
		interpolator->pos += dp;
		dp = ((int64_t)t_norm3 * (int64_t)interpolator->p3);
		dp = dp<<18;
		interpolator->pos += dp;
	}

	interpolator->cyclecnt++;
	if(interpolator->cyclecnt == interpolator->cyclecntmax){
		interpolator->cyclecnt=0;
	}
}

uint32_t interp_32_getpos(interp_32_t* interpolator){
	return(0xFFFFFFFF&(interpolator->pos>>32));
}

void interp_32_setpos(interp_32_t* interpolator, uint32_t pos){
	interpolator->pos = ((uint64_t)pos)<<32;
	interpolator->in_pos = pos;
	interpolator->in_pos_z0 = pos;
	interpolator->in_pos_z1 = pos;
	interpolator->in_pos_z2 = pos;
	interpolator->in_pos_z3 = pos;
}

void interp_32_setinpos(interp_32_t* interpolator, uint32_t pos){
	interpolator->in_pos = pos;
}

typedef struct
{
	int16_t kp;       //  P-Gain Q13.2
	int16_t ki;       //  I-Gain Q7.8
	int16_t min;      //  lower output limit
	int16_t max;      //  upper output limit
	int32_t i_val;    //  current integral value
} control_pictrl_i16_t;


int16_t control_pictrl_i16(control_pictrl_i16_t* controller, int16_t ref, int16_t act){

	int32_t ctrldiff;
	int32_t p_val, i_val;
	int32_t tmp_out;
	//int16_t out;

	ctrldiff = ((int32_t)ref - (int32_t)act);
	p_val = (((int32_t)controller->kp) * ctrldiff) >> 2;
	if(controller->ki){
		i_val = ((((int32_t)controller->ki) * ctrldiff)>>8) + controller->i_val;
	}
	else {
		i_val = 0.0f;
	}

	tmp_out = (p_val + i_val);

	if(tmp_out > controller->max){
		tmp_out = controller->max;
		if(i_val > controller->i_val) i_val = controller->i_val;
		//i_val = controller->max - p_val;
	}
	if(tmp_out < controller->min){
		tmp_out = controller->min;
		if(i_val < controller->i_val) i_val = controller->i_val;
		//i_val = controller->min - p_val;
	}

	controller->i_val = i_val;
	return((int16_t)tmp_out);
}


//Linear scale / offset:  out = gain*(in + offs)
int16_t interp_linearTrsfm_i16(interp_lin_i16_t* coeffs, int16_t in){
	int32_t accu;

	accu = in + coeffs->offs;
	accu *= coeffs->gain;

	return( (int16_t) (accu>>8));
}


static pos_data_t master_pos_data;
static int32_t stopramp_spd;

static interp_32_t ref_pos_interp = {
		.fs = 16000,
		.mode = interp_mode_spd,
		.pos = 0,
		.spd = 0,
		//.spd = -64  //  -1/4 Hz
		//.spd = 512,  //  2 Hz
		//.spd = 256  //  1 Hz
		.cyclecntmax = 160
};


typedef union {
	uint8_t val;
} master_gnrlcmd_t;

typedef union {
	uint8_t val;
} master_cmd_t;


typedef union {
	uint8_t val[4];
	int16_t master_ref_spd;
	int32_t master_ref_pos;
} master_processData_t;

typedef struct{
	master_gnrlcmd_t gnrlcmd;
	master_cmd_t cmd;
	master_processData_t processData;
	uint8_t newData;
	//bool writeLock;
} master_data_t;

//use multiple buffers for master data to be consistent!!
static uint8_t master_data_pread = 0;
static uint8_t master_data_pwrite = 1;
static master_data_t master_data[2];
static bool master_valid = false;


static int32_t Tref;
static uint32_t ref_pos;
static uint32_t enc_pos = 0;
static uint8_t stat;
static uint8_t service;

static uint8_t enc_valid = 0;  //indicate encoder zm was hit at least once
static bool button_pressed = 0;  //indicate a button press
static uint8_t imax = 15;
static uint8_t umax = 25;
static uint8_t umin = 8;

static int32_t ia_offs_sum;
static int32_t ib_offs_sum;
static int32_t ic_offs_sum;


//Data recorder (debugging)
#define BUFLEN 300 //Buffer length
#define CYCLEDIV 1 //cycle div
static int16_t ia_buf[BUFLEN];
static int16_t ib_buf[BUFLEN];
static int16_t ic_buf[BUFLEN];
static int16_t id_buf[BUFLEN];
static int16_t iq_buf[BUFLEN];
static uint16_t eps_buf[BUFLEN];
static uint32_t refpos_buf[BUFLEN];
static uint32_t encpos_buf[BUFLEN];
static int16_t vbus_buf[BUFLEN];
static uint16_t cyclecnt_buf[BUFLEN];
static int i_elecnt = 0;



//init ENC Signal
static uint32_t init_enc_phase = 0;
//static int32_t init_enc_freq = 4 * 65536;  //Q15.16, 4Hz
static int32_t init_enc_freq = 1 * 65536;  //Q15.16, 1Hz
//static int32_t init_enc_freq = 6553;  //Q15.16, 0.1Hz
//static int32_t init_enc_freq = 0 * 65536;  //Q15.16, 0Hz
static int16_t init_enc_ampl = 1000;       //ca. 4V

typedef enum {
	ctrl_sm_state_startup = 0,
	ctrl_sm_state_off = 1,
	ctrl_sm_state_curroffs = 2,
	ctrl_sm_state_initenc = 3,
	ctrl_sm_state_ccon = 4,
	ctrl_sm_state_pcon = 5,
	ctrl_sm_state_calib = 6,  //test-mode: calibration
	ctrl_sm_state_vref = 7   //test-mode: direct voltage output
} ctrl_sm_states_t;


//Position controller
static int16_t KpPCON = 20000;

//Current controllers
static control_pictrl_i16_t pi_d = {
		.i_val = 0,
		.ki = 10,
		.kp = 100,
		.max = 1500,  //approx 6V, needs to be adapted "online" to vbus!!
		.min = -1500  //approx -6V
};
static control_pictrl_i16_t pi_q = {
		.i_val = 0,
		.ki = 10,
		.kp = 100,
		.max = 1500,  //approx 6V, needs to be adapted "online" to vbus!
		.min = -1500  //approx -6V
};


static ctrl_sm_states_t ctrl_sm_state = ctrl_sm_state_startup;
//static ctrl_sm_states_t ctrl_sm_state = ctrl_sm_state_calib;
//static ctrl_sm_states_t ctrl_sm_state = ctrl_sm_state_vref;

void control_sm_to_spd_mode(void){
	//Transfer to spd mode, do initialization
	ref_pos_interp.mode = interp_mode_spd;
	interp_32_setpos(&ref_pos_interp,enc_pos);
	pi_d.i_val = 0;
	pi_q.i_val = 0;
	ctrl_sm_state = ctrl_sm_state_pcon;
	int16_t refs[3] = {0,0,0};
	pwm_setrefint_3ph_tim1(refs);
	LL_TIM_EnableAllOutputs(TIM1); //PWM on
}

void control_sm_to_pos_mode(void){
	//Transfer to pos mode, do initialization
	ref_pos_interp.mode = interp_mode_pos;
	master_pos_data.pos = enc_pos;  //set master pos to current enc_pos; will be overwritten if master data is available
	interp_32_setpos(&ref_pos_interp,enc_pos);
	pi_d.i_val = 0;
	pi_q.i_val = 0;
	ctrl_sm_state = ctrl_sm_state_pcon;
	int16_t refs[3] = {0,0,0};
	pwm_setrefint_3ph_tim1(refs);
	LL_TIM_EnableAllOutputs(TIM1); //PWM on
}


void control_sm_to_off_mode(void){
	//stop PWM
	LL_TIM_DisableAllOutputs(TIM1); //PWM off
	ctrl_sm_state = ctrl_sm_state_off;
	int16_t refs[3] = {0,0,0};
	pwm_setrefint_3ph_tim1(refs);
}


static int cntsm = 0;
void control_sm(void){

	//master_data[master_data_pread] is always consistent, because WFB ISR can not interrupt control ISR

	if(ctrl_sm_state == ctrl_sm_state_startup){
		cntsm++;
		//delay 0.5s
		if(cntsm >= 8000){
			ctrl_sm_state = ctrl_sm_state_curroffs;
			ia_offs_sum = ib_offs_sum = ic_offs_sum = 0;
			cntsm = 0;
		}
	}
	else if(ctrl_sm_state == ctrl_sm_state_curroffs){
		cntsm++;
		//wait 0.5s for offset determination
		if((!calib_data.i_autoOffs) || (cntsm >= 8000)){
			ctrl_sm_state = ctrl_sm_state_initenc;
			if (calib_data.i_autoOffs){
				calib_data.ia.offs = ia_offs_sum / 8000;
				calib_data.ib.offs = ib_offs_sum / 8000;
				calib_data.ic.offs = ic_offs_sum / 8000;
			}
			cntsm = 0;
			int16_t refs[3] = {0,0,0};
			pwm_setrefint_3ph_tim1(refs);
			LL_TIM_EnableAllOutputs(TIM1); //PWM on
		}

	}
	else if(ctrl_sm_state == ctrl_sm_state_initenc){
		if(enc_valid){
			//ctrl_sm_state = ctrl_sm_state_off;
			//control_sm_to_spd_mode(); //auto-start
			control_sm_to_pos_mode(); //auto-start
		}
	}
	else if(ctrl_sm_state == ctrl_sm_state_off){
		if(button_pressed){
			//control_sm_to_spd_mode();
			control_sm_to_pos_mode();
		}
	}
	else if(ctrl_sm_state == ctrl_sm_state_pcon){
		if(master_valid){
			//todo: Depend on mode (spd or pos data)
			//ref_pos_interp.spd = master_data[master_data_pread].processData.master_ref_spd;

			if(master_data[master_data_pread].newData == 1){
				master_pos_data.cyclerx = ref_pos_interp.cyclecnt;
				master_pos_data.pos = master_data[master_data_pread].processData.master_ref_pos;
				master_pos_data.avail = 1;
				master_data[master_data_pread].newData = 0;
			}
		}
		else {
			ref_pos_interp.spd = 0;
		}
	}

	if(ref_pos_interp.cyclecnt == 0){
		int32_t delta = 0;
		//synchronize on master data reception; cyclerx should be at 80 to have max. space to both directions
		//either early or delayed reception
		if(master_pos_data.avail){
			delta = ((int32_t)master_pos_data.cyclerx) - 80;
			delta = delta/2;
			if(delta > 5) delta = 5;
			if(delta < -5) delta = -5;
		}
		ref_pos_interp.cyclecntmax = 160 + delta;

		if(!master_pos_data.avail){
			if(!master_pos_data.avail_z1){
				//last two pos data not available. todo: Deccelerate using stop ramp!
				master_pos_data.pos += stopramp_spd;
				if(stopramp_spd>0) {
					stopramp_spd-=100;
				}
				else if(stopramp_spd<0) {
					stopramp_spd+=100;
				}
			}
			else {
				//todo: Interpolate over one cycle using current end spd from interpolator!!
				stopramp_spd = ((int32_t)ref_pos_interp.spd)<<2;
				master_pos_data.pos += stopramp_spd;
			}
		}
		master_pos_data.avail_z1 = master_pos_data.avail;
		master_pos_data.avail = 0;
		interp_32_setinpos(&ref_pos_interp, master_pos_data.pos);
	}
}


//todo: move to struct
uint16_t eps_trsfm, eps_trsfm_enc;
int16_t ia, ib, ic;
int16_t ud, uq;

void main_pwm_ctrl(void){
	//LL_GPIO_SetOutputPin(BUTTON_GPIO_Port, BUTTON_Pin);
	if(LL_GPIO_IsInputPinSet(BUTTON_GPIO_Port, BUTTON_Pin)){
		button_pressed = 0;
	} else{
		button_pressed = 1;
	}
	LL_GPIO_SetPinPull(BUTTON_GPIO_Port, BUTTON_Pin, LL_GPIO_PULL_DOWN);
	uint16_t enc_pos_raw;
	uint16_t enc_pos_raw_comp;
	static uint16_t enc_pos_raw_comp_z1 = 0;
	static uint16_t enc_zero = 0;

	control_sm();
	stat = ctrl_sm_state;

	interp_32(&ref_pos_interp);
	ref_pos = interp_32_getpos(&ref_pos_interp);

	union  {
		uint32_t cordicData;
		struct 	{
			int16_t cCos;
			int16_t cSin;
		} components;
	} cordicCosSin;
	LL_CORDIC_Config(CORDIC, LL_CORDIC_FUNCTION_COSINE, LL_CORDIC_PRECISION_4CYCLES, LL_CORDIC_SCALE_0, LL_CORDIC_NBWRITE_1, LL_CORDIC_NBREAD_1, LL_CORDIC_INSIZE_16BITS, LL_CORDIC_OUTSIZE_16BITS);

	//Cordic test
	//LL_CORDIC_WriteData(CORDIC, ((int32_t)1000)<<16 | 0); //0 degree
	//LL_CORDIC_WriteData(CORDIC, ((int32_t)1000)<<16 | 0x2000); //45 degree
	//cordicCosSin.cordicData = LL_CORDIC_ReadData(CORDIC);
	//int16_t testcos = cordicCosSin.components.cCos; //should be 1000 / 707
	//int16_t testsin = cordicCosSin.components.cSin; //should be 0  / 707


	// *** ENCODER position read ***
	enc_pos_raw = LL_TIM_GetCounter(TIM4) << 4;
	if(LL_TIM_IsActiveFlag_CC3(TIM4)){
	  enc_zero = LL_TIM_IC_GetCaptureCH3(TIM4) << 4;
	  if(enc_valid < 100) enc_valid++;
	}
	enc_pos_raw_comp = enc_pos_raw - enc_zero;

	//Check for overflow of single turn bits
	//Check for positive overflow
	if(  (enc_pos_raw_comp_z1 > 0xC000) && enc_pos_raw_comp<0x4000){
		enc_pos += 0x00010000;
	} else if(  (enc_pos_raw_comp_z1 < 0x4000) && enc_pos_raw_comp>0xc000){
		enc_pos -= 0x00010000;
	}
	enc_pos_raw_comp_z1 = enc_pos_raw_comp;

	enc_pos &= 0xFFFF0000; //wipe out single turn bits
	enc_pos |= enc_pos_raw_comp; //restore single turn bits

	//Transformation angle from encoder
	eps_trsfm_enc = 0xFFFF & (enc_pos_raw_comp << 2);  //4 motor polepairs
	eps_trsfm_enc += calib_data.eps_trsfmoffs;

	//Transformation angle determination depending on source
	if  (ctrl_sm_state == ctrl_sm_state_initenc){
		eps_trsfm = (init_enc_phase >> 16);
		init_enc_phase += (  ((int64_t)init_enc_freq) * 65536  ) / 16000;
	}
	else {
		eps_trsfm = eps_trsfm_enc;
	}

	// *** CURRENT MEASUREMENT and transformation ***
	while(!LL_ADC_IsActiveFlag_JEOS(ADC1)){
		//Error after certain time, if adc will not get ready -> signal error!
		//should not happen, because due to encoder read and conversion, a lot of time has passed
	}

	//Currents are in int16, Q7.8
	int16_t ia_raw = (int16_t) LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_1);
	ia = interp_linearTrsfm_i16(&calib_data.ia, ia_raw);

	//1024 = 9.0V,  1143 = 10.0V, 1262 = 11.0V
	int16_t vbus = (int16_t) LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_2);
	vbus = interp_linearTrsfm_i16(&calib_data.vbus, vbus);
	if( vbus < (5<<8) ) {
		vbus = (5<<8);
	}
	if( vbus > (40<<8) ){
		vbus = (40<<8);
	}
	int16_t divvbus = 32767/vbus;

	int16_t ib_raw = (int16_t) LL_ADC_INJ_ReadConversionData12(ADC2, LL_ADC_INJ_RANK_1);
	ib = interp_linearTrsfm_i16(&calib_data.ib, ib_raw);

	int16_t ic_raw = (int16_t) LL_ADC_INJ_ReadConversionData12(ADC2, LL_ADC_INJ_RANK_2);
	ic = interp_linearTrsfm_i16(&calib_data.ic, ic_raw);

	if(ctrl_sm_state >= ctrl_sm_state_initenc){
		//signal over- / undervoltage and overcurrent
		if(     (ia > ((int16_t)imax)*256)  ||    (ia < ((int16_t)imax)*-256)       ){
			control_sm_to_off_mode();
		}
		if(     (ib > ((int16_t)imax)*256)  ||    (ib < ((int16_t)imax)*-256)       ){
			control_sm_to_off_mode();
		}
		if(     (ib > ((int16_t)imax)*256)  ||    (ib < ((int16_t)imax)*-256)       ){
			control_sm_to_off_mode();
		}
		if(     (vbus > ((int16_t)umax)*256)  ||    (vbus < ((int16_t)umin)*256)       ){
			control_sm_to_off_mode();
		}
	}

	if (ctrl_sm_state == ctrl_sm_state_curroffs) {
		ia_offs_sum -= ia_raw;
		ib_offs_sum -= ib_raw;
		ic_offs_sum -= ic_raw;
	}

	//Clarke
	int16_t ialpha = (  ((int32_t)ia)*10923 + ((int32_t)ib)*-5461 + ((int32_t)ic)*-5461  ) / 16384;
	int16_t ibeta  = (                        ((int32_t)ib)* 9459 + ((int32_t)ic)*-9459  ) / 16384;
	//int16_t i0 = 0; //might be also calculated

	//Park
	//LL_CORDIC_Config(CORDIC, LL_CORDIC_FUNCTION_COSINE, LL_CORDIC_PRECISION_8CYCLES, LL_CORDIC_SCALE_0, LL_CORDIC_NBWRITE_1, LL_CORDIC_NBREAD_1, LL_CORDIC_INSIZE_16BITS, LL_CORDIC_OUTSIZE_16BITS);
	LL_CORDIC_WriteData(CORDIC, ((int32_t)ialpha)<<16 | eps_trsfm);
	//if precision would be higher is higher, it has to be checked for result availability!
	//while(!LL_CORDIC_IsActiveFlag_RRDY(CORDIC)){}
	cordicCosSin.cordicData = LL_CORDIC_ReadData(CORDIC);
	LL_CORDIC_WriteData(CORDIC, ((int32_t)ibeta)<<16 | eps_trsfm);
	int16_t id = cordicCosSin.components.cCos;
	int16_t iq = -cordicCosSin.components.cSin;
	//while(!LL_CORDIC_IsActiveFlag_RRDY(CORDIC)){}
	cordicCosSin.cordicData = LL_CORDIC_ReadData(CORDIC);
	id += cordicCosSin.components.cSin;
	iq += cordicCosSin.components.cCos;

	//Voltages in Q7.8
	int16_t ualpha = 0;
	int16_t ubeta = 0;
	int16_t idref = 0;
	int16_t iqref = 0;

	// *** CONTROLLERS: Position / Current ***
	if(ctrl_sm_state == ctrl_sm_state_pcon){
		//Position controller
		//Tref in fact is iqref in Q7.8 A
		Tref =   (  ((int64_t)KpPCON) *  ((int64_t)( ((int32_t) ref_pos)  -  ((int32_t) enc_pos)  ))   ) / 65536;
		if(Tref > 2000) Tref = 2000;   //approx 8A limit
		if(Tref < -2000) Tref = -2000;
		idref = 0;
		iqref = Tref;
	}

	if(ctrl_sm_state == ctrl_sm_state_ccon){
		idref = 256*4; //4A for testing
		iqref = 0;
	}

	if( (ctrl_sm_state == ctrl_sm_state_pcon) || (ctrl_sm_state == ctrl_sm_state_ccon) ){
		//Current Controllers
		ud = control_pictrl_i16(&pi_d,idref,id);
		uq = control_pictrl_i16(&pi_q,iqref,iq);
	}
	if  (ctrl_sm_state == ctrl_sm_state_initenc){
		ud = init_enc_ampl;
		uq = 0;
	}


	// *** TRANSFORMATION: Voltages ***
	//Park
	LL_CORDIC_WriteData(CORDIC, ((int32_t)ud)<<16 | eps_trsfm); //rotation with transform angle
	//while(!LL_CORDIC_IsActiveFlag_RRDY(CORDIC)){}
	cordicCosSin.cordicData = LL_CORDIC_ReadData(CORDIC);
	LL_CORDIC_WriteData(CORDIC, ((int32_t)uq)<<16 | eps_trsfm); //rotation with transform angle
	ualpha = cordicCosSin.components.cCos;
	ubeta = cordicCosSin.components.cSin;
	cordicCosSin.cordicData = LL_CORDIC_ReadData(CORDIC);
	ualpha -= cordicCosSin.components.cSin;
	ubeta += cordicCosSin.components.cCos;


	//Clarke
	int16_t ua = ualpha;
	int16_t ub = (  ((int32_t)(ualpha)) * -8192 + ((int32_t)(ubeta)) *  14189 ) / 16384;
	int16_t uc = (  ((int32_t)(ualpha)) * -8192 + ((int32_t)(ubeta)) * -14189 ) / 16384;

	if (ctrl_sm_state == ctrl_sm_state_vref){
		ua = 256 * 5;  //5V
		ub = 256 * 0;  //0V
		uc = 256 * -5;  //-5V
	}

	int16_t refs[3];
	int32_t tmpref = ua*divvbus;
	if(tmpref > 32767) tmpref = 32767;
	if(tmpref < -32768) tmpref = -32768;
	refs[0] = tmpref;

	tmpref = ub*divvbus;
	if(tmpref > 32767) tmpref = 32767;
	if(tmpref < -32768) tmpref = -32768;
	refs[1] = tmpref;

	tmpref = uc*divvbus;
	if(tmpref > 32767) tmpref = 32767;
	if(tmpref < -32768) tmpref = -32768;
	refs[2] = tmpref;

	if(ctrl_sm_state == ctrl_sm_state_off){
		refs[0] = 0;
		refs[1] = 0;
		refs[2] = 0;
	}


	if (ctrl_sm_state == ctrl_sm_state_calib){
		refs[0] = -32768;
		refs[1] = -32768;
		refs[2] = -32768;
	}


	//PWM output
	pwm_setrefint_3ph_tim1(refs);

	//store debug data to buffers
	int i_elecnt_dn = i_elecnt / CYCLEDIV;
	id_buf[i_elecnt_dn] = id;
	iq_buf[i_elecnt_dn] = iq;
	eps_buf[i_elecnt_dn] = eps_trsfm;
	ia_buf[i_elecnt_dn] = ia;
	ib_buf[i_elecnt_dn] = ib;
	ic_buf[i_elecnt_dn] = ic;
	refpos_buf[i_elecnt_dn] = ref_pos;
	encpos_buf[i_elecnt_dn] = enc_pos;
	vbus_buf[i_elecnt_dn] = vbus;
	cyclecnt_buf[i_elecnt_dn] = ref_pos_interp.cyclecnt;

	i_elecnt++;
	if(i_elecnt/CYCLEDIV >= BUFLEN) {
		i_elecnt = 0;
	}

	//LL_GPIO_ResetOutputPin(BUTTON_GPIO_Port, BUTTON_Pin);
	LL_GPIO_SetPinPull(BUTTON_GPIO_Port, BUTTON_Pin, LL_GPIO_PULL_NO);
}


static int insync_cnt = INSYNC_CNT_LEN;
static uint32_t syncupd_cnt = 0;
static int32_t syncdiff;
void MRF24J40_updhandler(void){
	//LL_GPIO_ResetOutputPin(DEBUG_TEST1_GPIO_Port, DEBUG_TEST1_Pin);

	//Check, whether in sync
	//syncupd_cnt is reset by rxhandler; it indicates number of lost frames
	if(syncupd_cnt > INSYNC_MAX_LOST_FRAMES){
		//more than INSYNC_MAX_LOST_FRAMES frames lost
		insync_cnt = INSYNC_CNT_LEN;  //go out of sync
	}
	else {
		//less than 2 frames lost -> check sync difference
		if(fabsf(syncdiff) < INSYNC_CNT_DIFF){
			if(insync_cnt) insync_cnt--;
		}
		else {
			insync_cnt = INSYNC_CNT_LEN;
		}
	}

	if(!insync_cnt){
		//in SYNC
		LL_GPIO_SetOutputPin(LED_GPIO_Port, LED_Pin);
		master_valid = true;
		//ref_spd = master_ref_spd;
		//syncController.kp = sc_kp_nonsync * 0.1;
		//syncController.ki = sc_ki_nonsync *0.1;
		//syncController.max = 2;
		//syncController.min = -2;
	}
	else {
		//not in SYNC
		LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
		master_valid = false;
		//ref_spd = 0;
		//syncController.kp = sc_kp_nonsync;
		//syncController.ki = sc_ki_nonsync;
	}


	//Prepare Data for next TX!

	if(!insync_cnt){
		//Dummy Payload:
		//* 1byte status
		//* 6bytes position or other real time actual value
		//* 1byte "service" data (-> 100bytes/s service data capacity)
		uint8_t myPayload[8] = {stat,(enc_pos>>24)&0xFF,(enc_pos>>16)&0xFF,(enc_pos>>8)&0xFF,enc_pos&0xFF,(Tref>>8)&0xFF,Tref&0xFF, service};

		//uint8_t myPayload[6] = {0,0,0,0,123,0};
		//uint8_t myPayload[6] = {(enc_pos>>24)&0xFF,(enc_pos>>16)&0xFF,(enc_pos>>8)&0xFF,enc_pos&0xFF,(Tref>>8)&0xFF,Tref&0xFF};
		//uint8_t myPayload[6] = {(enc_pos_raw_comp>>8)&0xFF,enc_pos_raw_comp&0xFF,0,0,(Tref>>8)&0xFF,Tref&0xFF};
		//uint8_t myPayload[6] = {0,0,(enc_pos_raw>>8)&0xFF,enc_pos_raw&0xFF,(Tref>>8)&0xFF,Tref&0xFF};

		mrf24j40_prepareTransmit(&myMrf24j40, &myMACHeader, myPayload, 8);
		do_tx = 1;
	}

	syncupd_cnt++;
}


void MRF24J40_txhandler(void){
	//LL_GPIO_SetOutputPin(DEBUG_TEST1_GPIO_Port, DEBUG_TEST1_Pin);
	if(do_tx){
		mrf24j40_doTransmit(&myMrf24j40);
		do_tx = 0;
	}
}


void MRF24J40_rxhandler(uint32_t syncact, uint32_t syncmax, int32_t* syncval_int, uint32_t* syncval_fract){
	uint8_t intst;

	intst = MRF24J40_shortAddressRead(REG_INTSTAT);
	if (intst & (1<<BIT_RXIF)) { //Check whether RX Interrupt
		//Disable packet reception, according to datasheet
		MRF24J40_shortAddressWrite(REG_BBREG1, (1<<BIT_RXDECINV));

		//READ RX FIFO
		uint8_t len;
		len = MRF24J40_longAddressRead(REG_RXFIFO);

		uint16_t fcf;
		fcf = MRF24J40_longAddressRead(REG_RXFIFO+1);
		fcf |= (MRF24J40_longAddressRead(REG_RXFIFO+2)<<8);

		//uint8_t sn;
		//sn = MRF24J40_longAddressRead(REG_RXFIFO+3);

		//Dest PAN ID
		uint16_t panid;
		panid = MRF24J40_longAddressRead(REG_RXFIFO+4);
		panid |= (MRF24J40_longAddressRead(REG_RXFIFO+5)<<8);

		//Dest Adr
		uint16_t destAdr;
		destAdr = MRF24J40_longAddressRead(REG_RXFIFO+6);
		destAdr |= (MRF24J40_longAddressRead(REG_RXFIFO+7)<<8);

		//Src Adr
		uint16_t srcAdr;
		srcAdr = MRF24J40_longAddressRead(REG_RXFIFO+8);
		srcAdr |= (MRF24J40_longAddressRead(REG_RXFIFO+9)<<8);

		//Expected Master total packet length
		uint8_t masterTotalDataLen = WFB_MASTER_DATA_BYTES_BASIC + WFB_MASTER_DATA_BYTES_PER_SLAVE*slave_data.slaveCnt;

		//Sync only if received packet is verified to be from master
		if((srcAdr == slave_data.masterAdr) && (len == masterTotalDataLen)){
			uint32_t syncref = WFB_SYNC_REF;
			syncdiff = ((int32_t)syncref) - ((int32_t)syncact);
			if(syncdiff < -(WFB_SYNC_TIMER_PERIOD/2)) {
				syncdiff += (syncmax+1);
				if(syncdiff < 1) syncdiff = 1;
			}
			if(syncdiff > (WFB_SYNC_TIMER_PERIOD/2)) {
				syncdiff -= (syncmax+1);
				if(syncdiff > -1) syncdiff = -1;
			}
			syncupd_cnt = 0;
			float syncctrl = -control_pictrl(&syncController, syncdiff, 0.0f);

			*syncval_int = (int32_t)(syncctrl);

			uint8_t slDataOffs = slave_data.slaveNum * WFB_MASTER_DATA_BYTES_PER_SLAVE;

			//"master_data" must be consistent. This block might be interrupted by control ISR
			//but this function can not interrupt the control ISR due to lower priority
			master_data[master_data_pwrite].gnrlcmd.val = MRF24J40_longAddressRead(REG_RXFIFO+10);

			master_data[master_data_pwrite].cmd.val = MRF24J40_longAddressRead(REG_RXFIFO+11+slDataOffs);
			master_data[master_data_pwrite].processData.val[3] = MRF24J40_longAddressRead(REG_RXFIFO+12+slDataOffs);
			master_data[master_data_pwrite].processData.val[2] = MRF24J40_longAddressRead(REG_RXFIFO+13+slDataOffs);
			master_data[master_data_pwrite].processData.val[1] = MRF24J40_longAddressRead(REG_RXFIFO+14+slDataOffs);
			master_data[master_data_pwrite].processData.val[0] = MRF24J40_longAddressRead(REG_RXFIFO+15+slDataOffs);
			master_data[master_data_pwrite].newData = 1;

			//master_data_pread can not be changed within control ISR, because this function can not interrupt the control ISR
			master_data_pread = master_data_pwrite;  //data completely written, can be read now

			//flip buffers
			if(master_data_pwrite == 0) master_data_pwrite = 1;
			else master_data_pwrite = 0;
		}

		//Enable packet reception
		MRF24J40_shortAddressWrite(REG_BBREG1, 0x00);
	}

}


void delay_ms(uint32_t ms){
	HAL_Delay(ms);
}

uint8_t MRF24J40_shortAddressRead(uint8_t address)
{
	//see: MRF24J40 Datasheep p. 14
	uint8_t TxData[2];
	uint8_t RxData[2];
	TxData[0] = (address&0x3F)<<1; //extract 6 bits A5...A0, shift to position, set MSB 0, LSB 0 (short address register read)
	TxData[1] =	0;

	LL_GPIO_ResetOutputPin(MRF24J40_CS_GPIO_Port, MRF24J40_CS_Pin);
	HAL_SPI_TransmitReceive(&hspi1, TxData, RxData, 2, 1000);
	LL_GPIO_SetOutputPin(MRF24J40_CS_GPIO_Port, MRF24J40_CS_Pin);

	return RxData[1];
}

void MRF24J40_shortAddressWrite(uint8_t address, uint8_t value)
{
	//see: MRF24J40 Datasheep p. 14
	uint8_t TxData[2];
	uint8_t RxData[2];
	TxData[0] = (address&0x3F)<<1 | 0x01; //extract 6 bits A5...A0, shift to position, set MSB 0, LSB 1 (short address register read)
	TxData[1] =	value;

	LL_GPIO_ResetOutputPin(MRF24J40_CS_GPIO_Port, MRF24J40_CS_Pin);
	HAL_SPI_TransmitReceive(&hspi1, TxData, RxData, 2, 1000);
	LL_GPIO_SetOutputPin(MRF24J40_CS_GPIO_Port, MRF24J40_CS_Pin);
}

uint8_t MRF24J40_longAddressRead(uint16_t address)
{
	//see: MRF24J40 Datasheep p. 15
	uint8_t TxData[3] ;
	uint8_t RxData[3];
	TxData[0] = (((uint8_t) (address >> 3))&0x7F) | 0x80;  //extract A9...A3, set MSB to 1 (Long address register access)
	TxData[1] =	(((uint8_t) (address << 5))&0xE0);         //extract A2...A0, shift to MSBs, rest zero (register read)
	TxData[2] =	0;

	LL_GPIO_ResetOutputPin(MRF24J40_CS_GPIO_Port, MRF24J40_CS_Pin);
	HAL_SPI_TransmitReceive(&hspi1, TxData, RxData, 3, 1000);
	LL_GPIO_SetOutputPin(MRF24J40_CS_GPIO_Port, MRF24J40_CS_Pin);

	return RxData[2];
}

void MRF24J40_longAddressWrite(uint16_t address, uint8_t value)
{
	//see: MRF24J40 Datasheep p. 15
	uint8_t TxData[3] ;
	uint8_t RxData[3];
	TxData[0] = (((uint8_t) (address >> 3))&0x7F) | 0x80; //extract A9...A3, set MSB to 1 (Long address register access)
	TxData[1] =	(((uint8_t) (address << 5))&0xE0) | 0x10; //extract A2...A0, shift to MSBs, next bit to 1 rest zero (register write)
	TxData[2] =	value;

	LL_GPIO_ResetOutputPin(MRF24J40_CS_GPIO_Port, MRF24J40_CS_Pin);
	HAL_SPI_TransmitReceive(&hspi1, TxData, RxData, 3, 1000);
	LL_GPIO_SetOutputPin(MRF24J40_CS_GPIO_Port, MRF24J40_CS_Pin);
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
